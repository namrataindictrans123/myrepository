{
 "etype": "NameError", 
 "evalue": "NameError(\"global name 'email' is not defined\",)", 
 "exception": {
  "args": "(\"global name 'email' is not defined\",)", 
  "message": "\"global name 'email' is not defined\""
 }, 
 "frames": [
  {
   "call": "(request=<Request 'http://localhost:5656/' [POST]>)", 
   "dump": {
    "frappe. handler": "<module 'frappe.handler' from '/home/indictrans/...epo/frappe-bench/apps/frappe/frappe/handler.pyc'>", 
    "frappe.handler. handle": "<function handle>", 
    "global frappe": "<module 'frappe' from '/home/indictrans/workspac...po/frappe-bench/apps/frappe/frappe/__init__.pyc'>", 
    "response": "None"
   }, 
   "file": "/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/app.py", 
   "func": "application", 
   "lines": {
    "59": "", 
    "60": "\t\tif frappe.local.form_dict.cmd:", 
    "61": "\t\t\tresponse = frappe.handler.handle()", 
    "62": "", 
    "63": "\t\telif frappe.request.path.startswith(\"/api/\"):"
   }, 
   "lnum": 61
  }, 
  {
   "call": "()", 
   "dump": {
    "cmd": "u'frappe.desk.form.save.savedocs'", 
    "data": "None", 
    "global execute_cmd": "<function execute_cmd>"
   }, 
   "file": "/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/handler.py", 
   "func": "handle", 
   "lines": {
    "19": "", 
    "20": "\tif cmd!='login':", 
    "21": "\t\tdata = execute_cmd(cmd)", 
    "22": "", 
    "23": "\t# data can be an empty string or list which are valid responses"
   }, 
   "lnum": 21
  }, 
  {
   "call": "(cmd=u'frappe.desk.form.save.savedocs', from_async=False)", 
   "dump": {
    "frappe. call": "<function call>", 
    "frappe. form_dict": "{'action': u'Save', 'doc': u'{\"docstatus\":0,\"doc...min\"}', 'cmd': u'frappe.desk.form.save.savedocs'}", 
    "global frappe": "<module 'frappe' from '/home/indictrans/workspac...po/frappe-bench/apps/frappe/frappe/__init__.pyc'>", 
    "method": "<function savedocs>"
   }, 
   "file": "/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/handler.py", 
   "func": "execute_cmd", 
   "lines": {
    "54": "\tis_whitelisted(method)", 
    "55": "", 
    "56": "\treturn frappe.call(method, **frappe.form_dict)", 
    "57": "", 
    "58": ""
   }, 
   "lnum": 56
  }, 
  {
   "call": "(fn=<function savedocs>, *args=(), **kwargs={'action': u'Save', 'cmd': u'frappe.desk.form.save.savedocs', 'doc': u'{\"docstatus\":0,\"doctype\":\"Registration\",\"name\"...89000\",\"language\":\"English\",\"password2\":\"admin\"}'})", 
   "dump": {
    "args": "()", 
    "fn": "<function savedocs>", 
    "newargs": "{'action': u'Save', 'doc': u'{\"docstatus\":0,\"doctype\":\"Registration\",\"name\"...89000\",\"language\":\"English\",\"password2\":\"admin\"}'}"
   }, 
   "file": "/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/__init__.py", 
   "func": "call", 
   "lines": {
    "1030": "\tnewargs = get_newargs(fn, kwargs)", 
    "1031": "", 
    "1032": "\treturn fn(*args, **newargs)", 
    "1033": "", 
    "1034": "def get_newargs(fn, kwargs):"
   }, 
   "lnum": 1032
  }, 
  {
   "call": "(doc=<tourism.tourism.doctype.registration.registration.Registration object>, action=u'Save')", 
   "dump": {
    "doc": "<tourism.tourism.doctype.registration.registration.Registration object>", 
    "doc. save": "<bound method Registration.save of <tourism.tour...e.registration.registration.Registration object>>"
   }, 
   "file": "/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/desk/form/save.py", 
   "func": "savedocs", 
   "lines": {
    "20": "\t\telse:", 
    "21": "\t\t\ttry:", 
    "22": "\t\t\t\tdoc.save()", 
    "23": "\t\t\texcept frappe.NameError as e:", 
    "24": "\t\t\t\tdoctype, name, original_exception = e if isinstance(e, tuple) else (doc.doctype or \"\", doc.name or \"\", None)"
   }, 
   "lnum": 22
  }, 
  {
   "call": "(self=<tourism.tourism.doctype.registration.registration.Registration object>, *args=(), **kwargs={})", 
   "dump": {
    "args": "()", 
    "kwargs": "{}", 
    "self": "<tourism.tourism.doctype.registration.registration.Registration object>", 
    "self. _save": "<bound method Registration._save of <tourism.tou...e.registration.registration.Registration object>>"
   }, 
   "file": "/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py", 
   "func": "save", 
   "lines": {
    "258": "\tdef save(self, *args, **kwargs):", 
    "259": "\t\t\"\"\"Wrapper for _save\"\"\"", 
    "260": "\t\treturn self._save(*args, **kwargs)", 
    "261": "", 
    "262": "\tdef _save(self, ignore_permissions=None, ignore_version=None):"
   }, 
   "lnum": 260
  }, 
  {
   "call": "(self=<tourism.tourism.doctype.registration.registration.Registration object>, ignore_permissions=None, ignore_version=None)", 
   "dump": {
    "self": "<tourism.tourism.doctype.registration.registration.Registration object>", 
    "self. insert": "<bound method Registration.insert of <tourism.to...e.registration.registration.Registration object>>"
   }, 
   "file": "/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py", 
   "func": "_save", 
   "lines": {
    "281": "", 
    "282": "\t\tif self.get(\"__islocal\") or not self.get(\"name\"):", 
    "283": "\t\t\tself.insert()", 
    "284": "\t\t\treturn", 
    "285": ""
   }, 
   "lnum": 283
  }, 
  {
   "call": "(self=<tourism.tourism.doctype.registration.registration.Registration object>, ignore_permissions=None, ignore_links=None, ignore_if_duplicate=False, ignore_mandatory=None)", 
   "dump": {
    "self": "<tourism.tourism.doctype.registration.registration.Registration object>", 
    "self. run_before_save_methods": "<bound method Registration.run_before_save_metho...e.registration.registration.Registration object>>"
   }, 
   "file": "/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py", 
   "func": "insert", 
   "lines": {
    "220": "", 
    "221": "\t\tself.flags.in_insert = True", 
    "222": "\t\tself.run_before_save_methods()", 
    "223": "\t\tself._validate()", 
    "224": "\t\tself.set_docstatus()"
   }, 
   "lnum": 222
  }, 
  {
   "call": "(self=<tourism.tourism.doctype.registration.registration.Registration object>)", 
   "dump": {
    "self": "<tourism.tourism.doctype.registration.registration.Registration object>", 
    "self. run_method": "<bound method Registration.run_method of <touris...e.registration.registration.Registration object>>"
   }, 
   "file": "/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py", 
   "func": "run_before_save_methods", 
   "lines": {
    "874": "", 
    "875": "\t\tif self._action==\"save\":", 
    "876": "\t\t\tself.run_method(\"validate\")", 
    "877": "\t\t\tself.run_method(\"before_save\")", 
    "878": "\t\telif self._action==\"submit\":"
   }, 
   "lnum": 876
  }, 
  {
   "call": "(self=<tourism.tourism.doctype.registration.registration.Registration object>, method=u'validate', *args=(), **kwargs={})", 
   "dump": {
    "Document. hook": "<function hook>", 
    "args": "()", 
    "fn": "<function validate>", 
    "global Document": "<class 'frappe.model.document.Document'>", 
    "kwargs": "{}", 
    "out": "undefined", 
    "self": "<tourism.tourism.doctype.registration.registration.Registration object>"
   }, 
   "file": "/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py", 
   "func": "run_method", 
   "lines": {
    "770": "", 
    "771": "\t\tfn.__name__ = str(method)", 
    "772": "\t\tout = Document.hook(fn)(self, *args, **kwargs)", 
    "773": "", 
    "774": "\t\tself.run_notifications(method)"
   }, 
   "lnum": 772
  }, 
  {
   "call": "(self=<tourism.tourism.doctype.registration.registration.Registration object>, *args=(), **kwargs={})", 
   "dump": {
    "args": "()", 
    "composed": "<function runner>", 
    "kwargs": "{}", 
    "method": "'validate'", 
    "self": "<tourism.tourism.doctype.registration.registration.Registration object>"
   }, 
   "file": "/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py", 
   "func": "composer", 
   "lines": {
    "1046": "", 
    "1047": "\t\t\tcomposed = compose(f, *hooks)", 
    "1048": "\t\t\treturn composed(self, method, *args, **kwargs)", 
    "1049": "", 
    "1050": "\t\treturn composer"
   }, 
   "lnum": 1048
  }, 
  {
   "call": "(self=<tourism.tourism.doctype.registration.registration.Registration object>, method='validate', *args=(), **kwargs={})", 
   "dump": {
    "add_to_return_value": "<function add_to_return_value>", 
    "args": "()", 
    "fn": "<function validate>", 
    "kwargs": "{}", 
    "self": "<tourism.tourism.doctype.registration.registration.Registration object>"
   }, 
   "file": "/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py", 
   "func": "runner", 
   "lines": {
    "1029": "\t\tdef compose(fn, *hooks):", 
    "1030": "\t\t\tdef runner(self, method, *args, **kwargs):", 
    "1031": "\t\t\t\tadd_to_return_value(self, fn(self, *args, **kwargs))", 
    "1032": "\t\t\t\tfor f in hooks:", 
    "1033": "\t\t\t\t\tadd_to_return_value(self, f(self, method, *args, **kwargs))"
   }, 
   "lnum": 1031
  }, 
  {
   "call": "(self=<tourism.tourism.doctype.registration.registration.Registration object>, *args=(), **kwargs={})", 
   "dump": {
    "args": "()", 
    "builtin getattr": "<built-in function getattr>", 
    "fn": "undefined", 
    "kwargs": "{}", 
    "method": "u'validate'", 
    "self": "<tourism.tourism.doctype.registration.registration.Registration object>"
   }, 
   "file": "/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py", 
   "func": "<lambda>", 
   "lines": {
    "764": "", 
    "765": "\t\tif hasattr(self, method) and hasattr(getattr(self, method), \"__call__\"):", 
    "766": "\t\t\tfn = lambda self, *args, **kwargs: getattr(self, method)(*args, **kwargs)", 
    "767": "\t\telse:", 
    "768": "\t\t\t# hack! to run hooks even if method does not exist"
   }, 
   "lnum": 766
  }, 
  {
   "call": "(self=<tourism.tourism.doctype.registration.registration.Registration object>)", 
   "dump": {
    "as_dict": "undefined", 
    "builtin False": "False", 
    "builtin None": "None", 
    "debug": "undefined", 
    "email": "undefined", 
    "filters": "undefined", 
    "frappe. client": "<module 'frappe.client' from '/home/indictrans/w...repo/frappe-bench/apps/frappe/frappe/client.pyc'>", 
    "frappe.client. get_value": "<function get_value>", 
    "global Registration": "<class 'tourism.tourism.doctype.registration.registration.Registration'>", 
    "global frappe": "<module 'frappe' from '/home/indictrans/workspac...po/frappe-bench/apps/frappe/frappe/__init__.pyc'>", 
    "objlist": "undefined"
   }, 
   "file": "/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/tourism/tourism/tourism/doctype/registration/registration.py", 
   "func": "validate", 
   "lines": {
    "10": "", 
    "11": "\tdef validate(self):", 
    "12": "\t\tobjlist= frappe.client.get_value (Registration, email, filters=None, as_dict=False, debug=False)", 
    "13": "\t\tprint(objlist)", 
    "14": ""
   }, 
   "lnum": 12
  }
 ], 
 "locals": {
  "self": "<tourism.tourism.doctype.registration.registration.Registration object>"
 }, 
 "pyver": "Python 2.7.12: /home/indictrans/workspace/Registration/bench-repo/frappe-bench/env/bin/python (prefix: /home/indictrans/workspace/Registration/bench-repo/frappe-bench/env)", 
 "timestamp": "2019-06-12 16:57:25.222258", 
 "traceback": "Traceback (most recent call last):\n  File \"/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/app.py\", line 61, in application\n    response = frappe.handler.handle()\n  File \"/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/handler.py\", line 21, in handle\n    data = execute_cmd(cmd)\n  File \"/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/handler.py\", line 56, in execute_cmd\n    return frappe.call(method, **frappe.form_dict)\n  File \"/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/__init__.py\", line 1032, in call\n    return fn(*args, **newargs)\n  File \"/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/desk/form/save.py\", line 22, in savedocs\n    doc.save()\n  File \"/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py\", line 260, in save\n    return self._save(*args, **kwargs)\n  File \"/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py\", line 283, in _save\n    self.insert()\n  File \"/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py\", line 222, in insert\n    self.run_before_save_methods()\n  File \"/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py\", line 876, in run_before_save_methods\n    self.run_method(\"validate\")\n  File \"/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py\", line 772, in run_method\n    out = Document.hook(fn)(self, *args, **kwargs)\n  File \"/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py\", line 1048, in composer\n    return composed(self, method, *args, **kwargs)\n  File \"/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py\", line 1031, in runner\n    add_to_return_value(self, fn(self, *args, **kwargs))\n  File \"/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/frappe/frappe/model/document.py\", line 766, in <lambda>\n    fn = lambda self, *args, **kwargs: getattr(self, method)(*args, **kwargs)\n  File \"/home/indictrans/workspace/Registration/bench-repo/frappe-bench/apps/tourism/tourism/tourism/doctype/registration/registration.py\", line 12, in validate\n    objlist= frappe.client.get_value (Registration, email, filters=None, as_dict=False, debug=False)\nNameError: global name 'email' is not defined\n"
}